{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","state","count","this","setState","cg","Math","ceil","sin","cos","abs","exp","log","indexOf","eval","digit","String","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","className","value","onClick","changeValue","Reset","Small","addDot","Calculate","PI","El","Sin","Cos","Log","Abs","Component"],"mappings":"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","file":"static/js/main.33e8c893.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// Functional Component\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nimport React , {Component} from 'react';\nimport './App.css';\n\n\n\n\nclass App extends Component {\n\n  state={\n    count:'0'\n  }\n\n  Reset(){\n    this.setState({\n      count:'0'\n    })\n  }\n\n   Small(){const {count}=this.state\n  const cg=count\n    this.setState({\n      \n      count:Math.ceil(cg/10)-1\n      \n    })\n  }\n    Sin(){const {count}=this.state\n  const cg=count\n    this.setState({\n      \n      count:Math.sin(cg)\n      \n    })\n  }\n\n   Cos(){const {count}=this.state\n  const cg=count\n    this.setState({\n      \n      count:Math.cos(cg)\n      \n    })\n  }\n\n  Abs(){const {count}=this.state\n  const cg=count\n    this.setState({\n      \n      count:Math.abs(cg)\n      \n    })\n  }\n\nEl(){const {count}=this.state\n  const cg=count\n    this.setState({\n      \n      count:Math.exp(cg)\n      \n    })\n  }\n  Log(){const {count}=this.state\n  const cg=count\n    this.setState({\n      \n      count:Math.log(cg)\n      \n    })\n  }\n\n  addDot(){\n    const {count}=this.state\n    if(count.indexOf('.'===-1))\n    {\n      this.setState({\n        count:count+'.'\n      })\n    }\n  }\n\n  Calculate(){\n    const {count}=this.state\n    this.setState({ \n     count:eval(count) \n  \n      \n    })\n  }\n\n  changeValue(digit){\n    const {count}=this.state\nthis.setState({\n  count:count==='0'?String(digit):count+digit\n})\n  }\n\nrender(){\n    return (\n    <div className='container'>\n    <div className='row'>\n      <input value={this.state.count}/>\n    </div>\n<div className='row'>\n  <button onClick={()=> this.changeValue(1)}>1</button>\n  <button onClick={()=> this.changeValue(2)}>2</button>\n  <button onClick={()=> this.changeValue(3)}>3</button>\n  <button onClick={()=> this.changeValue('+')}>+</button>\n</div>\n<div className='row'>\n  <button onClick={()=> this.changeValue(4)}>4</button>\n  <button onClick={()=> this.changeValue(5)}>5</button>\n  <button onClick={()=> this.changeValue(6)}>6</button>\n  <button onClick={()=> this.changeValue('-')}>-</button>\n</div>\n<div className='row'>\n  <button onClick={()=> this.changeValue(7)}>7</button>\n  <button onClick={()=> this.changeValue(8)}>8</button>\n  <button onClick={()=> this.changeValue(9)}>9</button>\n  <button onClick={()=> this.changeValue('*')}>*</button>\n</div>\n<div className='row'>\n  <button onClick={()=> this.changeValue(0)}>0</button>\n  <button onClick={()=> this.Reset()}>C</button>\n  <button onClick={()=> this.Small()}>CE</button>\n  <button onClick={()=> this.addDot()}>.</button>\n  <button onClick={()=> this.changeValue('/')}>/</button>\n</div>\n<div className='row'>\n  <button className='calculate' onClick={()=>this.Calculate()}>=</button>\n  <button onClick={()=> this.changeValue('(')}>(</button>\n  <button onClick={()=> this.changeValue(')')}>)</button>\n  <button onClick={()=> this.changeValue(Math.PI)}>π</button>\n  <button onClick={()=> this.El()}>e^x</button>\n  <button onClick={()=> this.Sin()}>Sin</button>\n  <button onClick={()=> this.Cos()}>Cos</button>\n   <button onClick={()=> this.Log()}>ln</button>\n   <button onClick={()=> this.Abs()}>Abs</button>\n</div>\n    </div>\n  )\n}\n}\n\nexport default App;\n\n"],"sourceRoot":""}